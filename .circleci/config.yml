version: 2.1

orbs:
  slack: circleci/slack@4.4.4
  go: circleci/go@1.7.0
  cypress: cypress-io/cypress@1.29.0
  docker: circleci/docker@2.2.0

executors:
  machine_with_dlc:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
  go_docker:
    docker:
      - image: cimg/go:1.17.1
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
  hadolint:
    docker:
      - image: hadolint/hadolint:2.7.0-alpine
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
  go_docker_and_mysql:
      docker:
        - image: cimg/go:1.17.1
          auth: 
            username: $DOCKER_USERNAME
            password: $DOCKER_PASS
        - image: cimg/mysql:8.0
          auth: 
            username: $DOCKER_USERNAME
            password: $DOCKER_PASS
          environment: 
            MYSQL_ROOT_PASSWORD: snippet_root_pass
            MYSQL_DATABASE: snippetbox
            MYSQL_USER: test_web
            MYSQL_PASSWORD: testing123
  cypress_docker:
    docker:
      - image: cypress/base:14.16.0
        auth: 
          username: $DOCKER_USERNAME
          password: $DOCKER_PASS
        environment:
          TERM: xterm
    working_directory: ~/app

commands:
  build_container:
    description: Start container and verify
    steps:
      - run:
          name: Build container
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose build
  start_app_and_verify:
    description: Start app and verify
    steps:
      - run:
          name: Start app
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose up -d
      - docker/install-dockerize
      - run:
          name: Wait for snippetbox
          command: dockerize -wait tcp://localhost:4000 -timeout 1m
  restore_go_cache:
    description: Restore the go cache
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
            - go-mod-v1-{{ checksum "go.mod" }}-
            - go-mod-v1-


jobs:
  go_lint_and_analyze:
    executor: go_docker
    steps:
      - checkout
      - run:
          name: Lint the Go cmd/web
          command: gofmt -d ./cmd/web
      - run:
          name: Lint the Go pkg/
          command: gofmt -d ./pkg
      - run:
          name: Run static analyzer on cmd/web
          command: go vet ./cmd/web
      - run:
          name: Run static analyzer on pgk
          command: |
            go vet ./pkg/forms
            go vet ./pkg/models
            go vet ./pkg/models/mock
            go vet ./pkg/models/mysql
  lint_docker_compose:
    executor: go_docker
    steps:
      - checkout
      - run:
          name: Install Docker compose
          command: sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - run:
          name: Lint Docker-Compose config
          command: docker-compose config -q
  unit-tests:
    executor: go_docker_and_mysql
    parallelism: 2
    working_directory: ~/project
    environment:
      TEST_RESULTS: /tmp/test-results
      CODE_COVERAGE: /tmp/code_coverage
    steps:
      - checkout
      - restore_go_cache
      - run: mkdir -p $CODE_COVERAGE
      - run: mkdir -p $TEST_RESULTS
      - run: |
          sudo apt-get update
          sudo apt-get install default-mysql-client
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Create test mysql table and user
          command: |
            mysql -h 127.0.0.1 --ssl-mode=DISABLED --user=root --password=snippet_root_pass --execute="CREATE DATABASE test_snippetbox CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            mysql -h 127.0.0.1 --ssl-mode=DISABLED --user=root --password=snippet_root_pass --execute="CREATE USER 'test_web'@'localhost'; \
            GRANT CREATE, DROP, ALTER, INDEX, SELECT, INSERT, UPDATE, DELETE ON test_snippetbox.* TO 'test_web'@'localhost'; \
            ALTER USER 'test_web'@'localhost' IDENTIFIED BY 'testing123';"
      - run:
          name: Run Go unit tests with coverage
          command: |
            go list ./... | circleci tests run \
            --split-by=timings --fail-fast --batch-count=3 --verbose --test-results-path="${TEST_RESULTS}" \
            --command="xargs gotestsum --junitfile ${TEST_RESULTS}/unit-tests-report.xml -- -coverprofile=${CODE_COVERAGE}/profile.out"
      - store_test_results:
          path: $TEST_RESULTS
      - store_artifacts:
          path: $CODE_COVERAGE/profile.out
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
          paths:
            - "./"

  build:
    executor: machine_with_dlc
    steps:
      - checkout
      - restore_go_cache
      - build_container

  ### How to run cypress tests without the orb##
  # cypress-tests:
  #   executor: machine_with_dlc
  #   steps:
  #     - checkout
  #     - start_app_and_verify
  #     - restore_cache:
  #         keys:
  #           - cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
  #           - cypress-v2{{ .Branch }}
  #           - cypress-v2
  #     - run: 
  #         name: Run Cypress tests
  #         command: docker run --network=container:snippetbox -it -v $PWD:/e2e -w /e2e cypress/included:3.2.0
  #     - save_cache:
  #         key: cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
  #         paths:
  #           - ~/.npm
  #           - ~/.cache
  #     - store_artifacts:
  #         path: ./cypress/videos
  #     - store_artifacts:
  #         path: ./cypress/screenshots

  deploy:
    executor: machine_with_dlc
    steps:
      - checkout
      - restore_go_cache
      - run:
          name: Build app and db
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USERNAME --password-stdin
            docker-compose build
      - run:
          name: Push images to dockerhub
          command: docker-compose push


workflows:
  build-test-and-deploy:
    jobs:
      - go_lint_and_analyze
      - lint_docker_compose
      - docker/hadolint:
          dockerfiles: ./docker/app/Dockerfile:./docker/db/Dockerfile
          executor-class: medium
          hadolint-tag: 2.2.0-debian
          ignore-rules: 'DL3003,DL3059'
      - build:
          requires:
              - go_lint_and_analyze
              - lint_docker_compose
              - docker/hadolint
      - unit-tests:
          requires:
            - go_lint_and_analyze
            - lint_docker_compose
            - docker/hadolint
      - cypress/install
      - cypress/run:
          name: cypress-tests
          executor: machine_with_dlc
          parallel: true
          parallelism: 3
          requires:
            - build
            - unit-tests
            - cypress/install
          pre-steps:
            - checkout
            - run: |
                    circleci tests glob "cypress/integration/*.spec.js" > /tmp/tests.txt
                    cat /tmp/tests.txt
            - run: |
                    sudo apt-get update
                    sudo apt-get install -y libgbm-dev
            - start_app_and_verify
            - restore_cache:
                keys:
                  - cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
                  - cypress-v2{{ .Branch }}
                  - cypress-v2
            - save_cache:
                key: cypress-v2{{ .Branch }}-{{ checksum "package.json" }}
                paths:
                  - ~/.npm
                  - ~/.cache
          post-steps:
            - store_test_results:
                path: test-results
          record: true
          command: |
                    cat /tmp/tests.txt | \
                    circleci tests run --command="xargs npx cypress run --spec" \
                    --fail-fast --batch-count=1 --test-results-path=/home/circleci/project/test-results --split-by=name
          attach-workspace: true
          no-workspace: true
      - deploy:
          requires:
            - cypress-tests
          filters:
            branches:
              only:
                - main

# VS Code Extension Version: 1.4.0